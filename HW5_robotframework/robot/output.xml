<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.0 on win32)" generated="20230403 00:25:49.379" rpa="false" schemaversion="3">
<suite id="s1" name="TestCasesMSSQL" source="C:\Users\Vitalii_Stetsenko\PycharmProjects\Course_Intermediate_DQE\HW5_robotframework\robot\Tests\TestCasesMSSQL.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymssql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20230403 00:25:49.418" level="INFO">Connecting using : pymssql.connect(database=AdventureWorks2012, user=NewLogin, password=1234567890, host=localhost, port=50768) </msg>
<status status="PASS" starttime="20230403 00:25:49.418" endtime="20230403 00:25:49.460"/>
</kw>
<test id="s1-t1" name="Table [Person].[Address]. Lengths of values of column rowguid is equal 36 for all records" line="16">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM [Person].[Address] WHERE LEN(rowguid) != 36;</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20230403 00:25:49.461" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM [Person].[Address] WHERE LEN(rowguid) != 36; </msg>
<msg timestamp="20230403 00:25:49.461" level="INFO">Executing : Row Count  |  SELECT * FROM [Person].[Address] WHERE LEN(rowguid) != 36; </msg>
<status status="PASS" starttime="20230403 00:25:49.461" endtime="20230403 00:25:49.682"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.460" endtime="20230403 00:25:49.682"/>
</test>
<test id="s1-t2" name="Table [Person].[Address]. Column ModifiedDate doesn’t contain future dates" line="20">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM [Person].[Address] WHERE ModifiedDate &gt; CURRENT_TIMESTAMP;</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20230403 00:25:49.685" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM [Person].[Address] WHERE ModifiedDate &gt; CURRENT_TIMESTAMP; </msg>
<msg timestamp="20230403 00:25:49.685" level="INFO">Executing : Row Count  |  SELECT * FROM [Person].[Address] WHERE ModifiedDate &gt; CURRENT_TIMESTAMP; </msg>
<status status="PASS" starttime="20230403 00:25:49.685" endtime="20230403 00:25:49.695"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.684" endtime="20230403 00:25:49.697"/>
</test>
<test id="s1-t3" name="Table [Production].[Document]. Values of column [DocumentLevel] in range (0, 1, 2)" line="24">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM [Production].[Document] WHERE [DocumentLevel] not in (0, 1, 2);</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20230403 00:25:49.699" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM [Production].[Document] WHERE [DocumentLevel] not in (0, 1, 2); </msg>
<msg timestamp="20230403 00:25:49.699" level="INFO">Executing : Row Count  |  SELECT * FROM [Production].[Document] WHERE [DocumentLevel] not in (0, 1, 2); </msg>
<status status="PASS" starttime="20230403 00:25:49.699" endtime="20230403 00:25:49.776"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.698" endtime="20230403 00:25:49.777"/>
</test>
<test id="s1-t4" name="Table [Production].[Document]. Values of column [Owner] between 217 and 220" line="28">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM [Production].[Document] WHERE [Owner] not between 217 and 220;</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20230403 00:25:49.778" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM [Production].[Document] WHERE [Owner] not between 217 and 220; </msg>
<msg timestamp="20230403 00:25:49.778" level="INFO">Executing : Row Count  |  SELECT * FROM [Production].[Document] WHERE [Owner] not between 217 and 220; </msg>
<status status="PASS" starttime="20230403 00:25:49.778" endtime="20230403 00:25:49.786"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.778" endtime="20230403 00:25:49.787"/>
</test>
<test id="s1-t5" name="Table [Production].[UnitMeasure]. Column UnitMeasureCode doesn’t contain null values" line="32">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM [Production].[UnitMeasure] WHERE UnitMeasureCode is null;</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20230403 00:25:49.790" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM [Production].[UnitMeasure] WHERE UnitMeasureCode is null; </msg>
<msg timestamp="20230403 00:25:49.790" level="INFO">Executing : Row Count  |  SELECT * FROM [Production].[UnitMeasure] WHERE UnitMeasureCode is null; </msg>
<status status="PASS" starttime="20230403 00:25:49.790" endtime="20230403 00:25:49.791"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.789" endtime="20230403 00:25:49.791"/>
</test>
<test id="s1-t6" name="Table [Production].[UnitMeasure]. Verify maxmin values of UnitMeasureCode column" line="36">
<kw name="Query" library="DatabaseLibrary">
<var>${queryResults}</var>
<arg>SELECT MAX(UnitMeasureCode) as max_value, MIN(UnitMeasureCode) as min_value FROM [Production].[UnitMeasure];</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230403 00:25:49.793" level="INFO">Executing : Query  |  SELECT MAX(UnitMeasureCode) as max_value, MIN(UnitMeasureCode) as min_value FROM [Production].[UnitMeasure]; </msg>
<msg timestamp="20230403 00:25:49.796" level="INFO">${queryResults} = [('PT ', 'BOX')]</msg>
<status status="PASS" starttime="20230403 00:25:49.793" endtime="20230403 00:25:49.796"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>'${queryResults[0][0].strip()}'</arg>
<arg>'PT'</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20230403 00:25:49.796" endtime="20230403 00:25:49.796"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>'${queryResults[0][1].strip()}'</arg>
<arg>'BOX'</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20230403 00:25:49.797" endtime="20230403 00:25:49.797"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.793" endtime="20230403 00:25:49.798"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20230403 00:25:49.799" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230403 00:25:49.799" endtime="20230403 00:25:49.799"/>
</kw>
<status status="PASS" starttime="20230403 00:25:49.380" endtime="20230403 00:25:49.799"/>
</suite>
<statistics>
<total>
<stat pass="6" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="6" fail="0" skip="0" id="s1" name="TestCasesMSSQL">TestCasesMSSQL</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
